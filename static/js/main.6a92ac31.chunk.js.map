{"version":3,"sources":["helpers/calc-total.js","helpers/calc-average.js","components/processFrogs/frog-display.jsx","helpers/append-row.js","components/append-row/append-row.jsx","helpers/add-click-handler.js","components/add-click-handler/add-click-handler.jsx","components/array-filter/array-filter.jsx","components/string-display/string-display.jsx","data.js","helpers/haversine.js","components/distance-display/distance-display.jsx","index.js"],"names":["calcTotal","num","total","i","calcAverage","frogs","FrogDisplay","useState","numberOfDays","setNumberOfDays","totalWeight","setTotal","averageWeight","setAverage","className","onSubmit","event","preventDefault","test","alert","type","value","onChange","target","appendRow","table","document","getElementById","rowsArray","getElementsByTagName","lastRowCellCount","length","newRow","insertRow","cellCount","insertCell","innerHTML","TableDisplay","id","border","onClick","handleClick","button","style","display","setTimeout","ButtonDisplay","ArrayDisplay","arrayToProcess","splice","UserInput","newValue","handleInput","maxLength","ReverseString","stringInReverse","string","split","reverse","join","StringDisplay","input","setInput","zipCodeData","zipCodeType","city","state","locationType","lat","long","location","Haversine","startingZip","endingZip","zip1","zip2","radLat1","pi","radLong1","radLat2","dLat","dLong","distanceKM","radiusKM","asin","sqrt","pow","sin","cos","distanceInMiles","round","DistanceDisplay","setStartingZip","setEndingZip","message","setMessage","validateZip","zip","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.6a92ac31.chunk.js","sourcesContent":["export const calcTotal = (num) => {\n  if (num <= 10) {\n    let total = 0;\n    for (let i = 1; i <= num; i++) {\n      total += i;\n    }\n    const communityWeight = total * 10;\n    return communityWeight;\n  } else {\n    const fullGrownFrogs = num - 10;\n    const communityWeight = (fullGrownFrogs * 100) + 550;\n    return communityWeight;\n  }\n}\n\nexport default calcTotal;","export const calcAverage = (total, frogs) => {\n  const averageWeight = total / frogs\n  return averageWeight;\n}\n\nexport default calcAverage;","import React, { useState } from 'react';\nimport './frog-display.css';\nimport calcTotal from '../../helpers/calc-total';\nimport calcAverage from '../../helpers/calc-average';\n\nexport const FrogDisplay = () => {\n  const [numberOfDays, setNumberOfDays] = useState('');\n  const [totalWeight, setTotal] = useState('');\n  const [averageWeight, setAverage] = useState('')\n\n  const validateInput = (input) => {\n    return /^[0-9]*$/.test(input);\n  }\n  \n  const handleChange = (event) => {\n      setNumberOfDays(event.target.value);\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (validateInput(numberOfDays)) {\n      setTotal(calcTotal(numberOfDays));\n      setAverage(calcAverage(calcTotal(numberOfDays), numberOfDays))\n    } else {\n      alert('Only numbers are valid inputs');\n      setNumberOfDays('');\n    }\n  }\n\n  return (\n    <div className=\"frog-data-container\">\n      <form onSubmit={handleSubmit} className=\"form\">\n        <label>\n          Enter Number of Days:\n          <input type=\"type\" value={numberOfDays} onChange={handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\"/>\n      </form>\n      <h4>{`Number of frogs: ${numberOfDays}`}</h4>\n      <h4>{`The weight of the frog community on day ${numberOfDays} : ${totalWeight + ' grams'}`}</h4>\n      <h4>{`The weight of the average frog on day ${numberOfDays}: ${averageWeight + ' grams'}`}</h4>\n    </div>\n  )\n}\n\n\nexport default FrogDisplay;","export const appendRow = () => {\n  const table = document.getElementById(\"tbl\")\n  const rowsArray = table.getElementsByTagName('tr')\n  const numberOFRows = rowsArray.length\n  const lastRow = rowsArray[numberOFRows - 1]\n  const lastRowCellCount = lastRow.getElementsByTagName('td').length\n  const newRow = table.insertRow();  //defaults to -1 which is the last row\n  for (let cellCount = 0; cellCount < lastRowCellCount; cellCount++ ) {\n    let newCell = newRow.insertCell();\n    newCell.innerHTML = `New Cell, who dis?`\n  }\n}\n\n\nexport default appendRow;","import React from 'react';\nimport './append-row.css';\nimport appendRow from '../../helpers/append-row';\n\nexport const TableDisplay = () => {\n  return (\n    <div className=\"table-container small-buffer\">\n      <table id=\"tbl\" border=\"1\">\n        <tbody>\n          <tr>\n            <td>Row</td>\n            <td>1</td>\n          </tr>\n          <tr>\n            <td>Row</td>\n            <td>2</td>\n          </tr>\n          <tr>\n            <td>Row</td>\n            <td>3</td>\n          </tr>\n          <tr>\n            <td>Row</td>\n            <td>4</td>\n          </tr>\n        </tbody>\n      </table>\n      <button onClick={appendRow}>Add a row!</button>\n    </div>\n    \n  )\n}\n\nexport default TableDisplay;","export const handleClick = () => {\n  const button = document.getElementById('btn');\n  button.style.display = \"none\";\n  setTimeout(() => {\n    button.style.display = 'inline-block'\n  }, 1000)\n}\n\nexport default handleClick;","import React from 'react';\nimport './add-click-handler.css';\nimport handleClick from '../../helpers/add-click-handler';\n\nexport const ButtonDisplay = () => {\n  return (\n      <button id=\"btn\" className=\"small-buffer\" onClick={handleClick}>\n      Want to see a magic trick?</button>\n  )\n}\n\nexport default ButtonDisplay;","import React from 'react';\nimport './array-filter.css';\n\nexport const ArrayDisplay = () => {\n  const arrayToProcess = [1, 2, 'a', 3, 'b', 'c', true, 4, false, '6'];\n  const processArray = () => {   \n    for (let i = arrayToProcess.length - 1; i >= 0; i--) {\n      if (typeof arrayToProcess[i] !== 'number') {\n        arrayToProcess.splice(i, 1);\n      }\n    }\n    alert(`After removing all non-numeric characters, your array is: ${arrayToProcess}`);\n    return arrayToProcess;\n  }\n\n  return (\n    <div>\n      {arrayToProcess}\n      <button onClick={processArray}>Remove Non-numbers</button>\n    </div>\n  )\n}\n\nexport default ArrayDisplay;","import React, { useState } from 'react';\nimport './string-display.css';\n\n//UserInput accepts a user input which is passed to the ReverseString component\nconst UserInput = ({ newValue, handleInput }) => {\n  return (\n    <div className=\"container\">\n      <h3>Enter some text below:</h3>\n      <input type=\"text\" value={newValue} onChange={handleInput} maxLength='50' />\n    </div>\n  )\n}\n\n//ReverseString accepts a string as a prop and displays it in reverse\nconst ReverseString = ({ string }) => {\n  const stringInReverse = string.split(\"\").reverse().join(\"\")\n  return (\n    <div className=\"container\">\n      <h3>Your text in reverse:</h3>\n      {stringInReverse}\n    </div>\n  )\n}\n\n//Display component contains the input and the Reserse String Component\nconst StringDisplay = () => {\n  const [input, setInput] = useState('');\n\n  const handleUserInput = event => {\n    setInput(event.target.value);\n  };\n\n  return (\n    <div className=\"display\">\n      <UserInput newValue={input} handleInput={handleUserInput} />\n      <ReverseString string={input} />\n    </div>\n  )\n}\n\n\nexport default StringDisplay;","export const zipCodeData = {\n  '00705': {\n    zipCodeType: \"STANDARD\",\n    city: 'AIBONITO',\n    state: 'PR',\n    locationType: 'PRIMARY',\n    lat: 18.14,\n    long: -66.26,\n    location: \"NA-US-PR-AIBONITO\"\n  },\n  '11709': {\n    zipCodeType: \"STANDARD\",\n    city: 'BAYVILLE',\n    state: 'NY',\n    locationType: 'PRIMARY',\n    lat: 40.90,\n    long: -73.56,\n    location: \"NA-US-NY-BAYVILLE\"\n  },\n  '06401': {\n    zipCodeType: \"STANDARD\",\n    city: 'ANSONIA',\n    state: 'CT',\n    locationType: 'PRIMARY',\n    lat: 41.34,\n    long: -73.06,\n    location: \"NA-US-CT-ANSONIA\"\n  },\n  '07071': {\n    zipCodeType: \"STANDARD\",\n    city: 'LYNDHURST',\n    state: 'NJ',\n    locationType: 'PRIMARY',\n    lat: 40.79,\n    long: -74.11,\n    location: \"NA-US-NJ-LYNDHURST\"\n  },\n  '12308': {\n    zipCodeType: \"STANDARD\",\n    city: 'SCHENECTADY',\n    state: 'NY',\n    locationType: 'PRIMARY',\n    lat: 42.80,\n    long: -73.92,\n    location: \"NA-US-NY-SCHENECTADY\"\n  },\n  '20001': {\n    zipCodeType: \"STANDARD\",\n    city: 'WASHINGTON',\n    state: 'DC',\n    locationType: 'PRIMARY',\n    lat: 38.89,\n    long: -77.03,\n    location: \"NA-US-DC-WASHINGTON\"\n  },\n  '90001': {\n    zipCodeType: \"STANDARD\",\n    city: 'LOS ANGELES',\n    state: 'CA',\n    locationType: 'PRIMARY',\n    lat: 33.97,\n    long: -118.24,\n    location: \"NA-US-CA-LOS ANGELES\"\n  },\n  '11954': {\n    zipCodeType: \"STANDARD\",\n    city: 'MONTAUK',\n    state: 'NY',\n    locationType: 'PRIMARY',\n    lat: 41.04,\n    long: -71.94,\n    location: \"NA-US-NY-MONTAUK\"\n  },\n  '28202': {\n    zipCodeType: \"STANDARD\",\n    city: 'CHARLOTTE',\n    state: 'NC',\n    locationType: 'PRIMARY',\n    lat: 35.19,\n    long: 80.83,\n    location: \"NA-US-NC-CHARLOTTE\"\n  },\n  '33125': {\n    zipCodeType: \"STANDARD\",\n    city: 'MIAMI',\n    state: 'FL',\n    locationType: 'PRIMARY',\n    lat: 25.77,\n    long: -80.20,\n    location: \"NA-US-FL-MIAMI\"\n  }\n}\n\nexport default zipCodeData;","import zipCodeData from '../data';\nimport { pi, round, asin, pow, sin, cos, sqrt } from 'mathjs';\n\n//Uses the Haversine formula to calculate the great-circle distance between the coordiantes derived from the zip codes\n//The result is converted to miles and rounded to the nearest whole number\nexport const Haversine = (startingZip, endingZip) => {\n  const zip1 = zipCodeData[startingZip];\n  const zip2 = zipCodeData[endingZip];\n\n  if (zip1 && zip2) {\n    //convert degrees to radians\n    const radLat1 = (zip1.lat / 180) * pi;\n    const radLong1 = (zip1.long / 180) * pi;\n    const radLat2 = (zip2.lat / 180) * pi;\n    const radLong2 = (zip2.long / 180) * pi;\n\n    //Diffeence in radians\n    const dLat = (radLat2 - radLat1);\n    const dLong = (radLong2 - radLong1);\n    //Radius of the earth in km\n    const radiusKM = 6371;\n\n    const distanceKM = (\n      radiusKM * 2 *\n      asin(\n        sqrt(\n          pow(sin(dLat / 2), 2) +\n          pow(sin(dLong / 2), 2) *\n          cos(radLat1) * cos(radLat2)\n        )\n      ) * 100\n    ) / 100;\n\n    //Converts distance from km to miles and rounds to the nearest whole number\n    const distanceInMiles = round(distanceKM * .621);\n    return `The distance between ${zip1.city}, ${zip1.state} and ${zip2.city}, ${zip2.state} is ${distanceInMiles} miles!`;\n  } else {\n    return '1 or more zipcodes do not exist';\n  }\n};\n\nexport default Haversine;","import React, {useState} from 'react';\nimport Haversine from '../../helpers/haversine';\nimport './distance-display.css';\n\nexport const DistanceDisplay = () => {\n  const [startingZip, setStartingZip] = useState('');\n  const [endingZip, setEndingZip] = useState('');\n  const [message, setMessage] = useState('');\n\n  const validateZip = (zip) => {\n    return /^\\d{5}?$/.test(zip);\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (validateZip(startingZip) && validateZip(endingZip)) {\n      setMessage(Haversine(startingZip, endingZip));\n    } else {\n      setMessage('Invalid Zipcodes');\n    }\n  }\n\n  const Message = ({ message }) => (\n    <span>{message}</span>\n  )\n\n  return (\n    <div className=\"display-distance-container\">\n      <h2>Enter Two Zipcodes Below:</h2>\n      <form onSubmit={handleSubmit} className=\"form\">\n        <label>\n          Starting Zipcode:\n          <input type=\"text\" value={startingZip} onChange={(event) => setStartingZip(event.target.value)} maxLength='5'/>\n        </label>\n        <label>\n          Ending Zipcode:\n          <input type=\"text\" value={endingZip} onChange={(event) => setEndingZip(event.target.value)} maxLength='5'/>\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      <Message message={message} />\n    </div>\n  )\n}\n\nexport default DistanceDisplay;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport FrogDisplay from './components/processFrogs/frog-display.jsx'\nimport TableDisplay from './components/append-row/append-row.jsx';\nimport ButtonDisplay from './components/add-click-handler/add-click-handler.jsx';\nimport ArrayDisplay from './components/array-filter/array-filter.jsx';\nimport StringDisplay from './components/string-display/string-display.jsx';\nimport DistanceDisplay from './components/distance-display/distance-display.jsx';\nimport './index.css';\n\n\n//MainDisplay is the hub for storing each component in the code test and the corresponding titles for each section\nconst MainDisplay = () => {\n  return (\n    <div className=\"main-container\">\n      <div className=\"buffer center-stack\">\n        <h1 className=\"center-stack\">CS Questions</h1>\n        <FrogDisplay />\n      </div>\n      <div className=\"buffer center-stack\">\n        <h1 className=\"center-stack\">JavaScript Questions</h1>\n        <TableDisplay />\n        <ButtonDisplay />\n        <ArrayDisplay />\n      </div>\n      <div className=\"buffer center-stack\">\n        <h1 className=\"center-stack\">React Questions</h1>\n        <StringDisplay />\n        <DistanceDisplay/>\n      </div>\n    </div>\n  )\n}\n\nReactDOM.render(<MainDisplay />, document.querySelector('#root'));\n\n\n"],"sourceRoot":""}